import time
import os
os.system("raspivid -o – -t 0 -n | cvlc -vvv stream:///dev/stdin –sout ‘#rtp{sdp=rtsp://:8554/}’ :demux=h264")


from subprocess import *
import time
Popen('python .py')
time.sleep(1)
Popen('python .py')


sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

python3 1.py & 2.py

USERNAME: pi
PASSWORD: raspberry



Creating a service
On your Pi, create a .service file for your service, for example:

myscript.service
------------------
[Unit]
Description=My service
After=network.target

[Service]
ExecStart=/usr/bin/python3 -u main.py
WorkingDirectory=/home/pi/myscript
StandardOutput=inherit
StandardError=inherit
Restart=always
User=pi

[Install]
WantedBy=multi-user.target

--------------------------------------
So in this instance, the service would run Python 3 from our working directory /home/pi/myscript which contains our python program to run main.py. But you are not limited to Python programs: simply change the ExecStart line to be the command to start any program/script that you want running from booting.

Copy this file into /etc/systemd/system as root, for example:

=============== sudo cp myscript.service /etc/systemd/system/myscript.service
Once this has been copied, you can attempt to ====start==== the service using the following command:

=============== sudo systemctl start myscript.service
===Stop=== it using following command:

=============== sudo systemctl stop myscript.service
When you are happy that this starts and stops your app, you can have it start ====automatically==== on reboot by using this command:

===============sudo systemctl enable myscript.service
The systemctl command can also be used to restart the service or disable it from boot up!
